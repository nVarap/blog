{
  
    
        "post0": {
            "title": "N@tM!",
            "content": "Summary of the Event (Presenting Our Project) . Night at the Museum (N@TM) was on May 31, 2023. There were three time slots for the different classes, and we (period 4 Yeung) had to be at the event to present our work from 7:00pm-7:30pm. We all decided to bring our laptops to the event so that we could show curious people and the teacher our final project. All of us had the opportunity to present to guests who attended the event, and the room was very crowded with teams from other periods having their laptops out. After the teacher saw our project functioning the way it was supposed to and showing our work to everybody, we all left the room to go and look at work from other electives. . Projects from Other Classes . After our time to present ended, we all went around to look at other projects for this class and other electives, such as 3D Animation, Ceramics, AP Studio Art, and many more. I was fascinated by what I was seeing and was amazed at how talented students around my age can be with their art work. I could very much see a lot of effort and dedication was put into the projects that I saw, and it overall made me feel inspired to start approaching any art-related activities with a positive mindset. Here are pictures of some of the projects that I took at N@TM! I include some brief notes about each project and what I really liked about it or caught my eye. I hope you like them as much as I did! :) . CSP (This Class!) . Assortment of Games . . I was amazed at how detailed and interactive the frontend was | I really liked how you could not only see your review of the cafe but also reviews from other people | I was interested in how the project was able to calculate the average rating from all reviews left by others | The main purpose of this application was to entertain users with games and allow them to provide feedback on the website Finding the Shortest Route . . | I really liked the design of the website | The main purpose of “Don’t Leave Me” was to match two people up based on their personalities and other qualities | While the project was not 100% complete, it was still fun to try out and interesting to hear from the team how they created this Jupyter Notebook stuff and relation to Frontend . . | The frontend was very interactive and had a cool design | The teammate that was presenting did a great job at explaining to us how the project worked and at showing us a demo of the project functioning | While not 100% complete, I still enjoyed learning about the project along with other people who were interested in looking at it | The main purpose of this project was to provide users with a personal fitness plan based on their calories, height, weight, etc. CSA FRQ Tests . . | I had the opportunity to try out the snake game, which was very entertaining | I was amazed at how the project also implemented a leader board that kept track of everyone’s score | Not 100% complete, as the teammate presenting this informed us that they were still trying to figure out how to prevent cheating, as the final scores are inputted by the user and not automatically generated; however, I still enjoyed playing around with some of the arcade games | The purpose of this project was to provide entertainment for the user with an assortment of games, such as Snake as shown in the image above 3D Animation . . | As someone who took 3D Animation 1-2, I was impressed by how the person was able to make the donut look very realistic (probably better than mine!) | The light shined on the donut’s frosting is especially satisfying to look at | I liked how the donut was up close, as this told us that the donut was the emphasis of the project | I liked how detailed yet simple the chair and table were | The blue background goes well with the color of the objects | The overall scene is very realistic and I can tell that a lot of effort was put into it | Recalling some of the criteria for this project, I really liked how the person included chairs on all sides of the table, as it makes the scene look more “complete” (don’t know how else to describe it) | The designs of the ground and chairs makes the scene look very realistic | I especially found the shiny parts of the table pleasing to look at | I was amazed at how realistic the dribbling of the donut frosting was | The coffee inside the cup looks very realistic along with the glass cup itself | The background color goes well with the colors and designs of the donut and coffee Ceramics . . | I was impressed by how detailed the face | I could tell that a lot of effort was put into the eyes and mouth | The entire thing was, simply put, satisfying and pleasing to look at with some friends | I liked how shiny the octopus was | The colors used go really well together | Overall, there was definitely a lot of attention to detail | The watering pot looks very real, which shows that there was a lot of effort put into making it look like a real one | I like how shiny different parts of the watering pot was | It was really interesting and pleasing to look at Design and Mixed Media (I Think?) . . | Looking at this piece of art has made me amazed that there are many students who are around my age that have the talent and skill to create art like this | I liked how some parts of the hair and skin were made a bit darker compared to everything else to give off a more “real” effect | The word “race” makes me curious about what this piece is trying to convey N@tM Reflection . I had a really good time looking at work from not only our class, but also work from other electives such as 3D Animation, Ceramics, and Design and Mixed Media. Regardless of where the projects came from, looking at them made me amazed at how talented our generation is and how we have the ability to put out work like this. I was especially interested in the projects from 3D Animation, as I myself have taken the class and remember some of the projects that we had to do. Looking at the work from that class made me think about what I could have done better when I was in that class, which will definitely be helpful if I plan on becoming a 3D artist in the long run. I also enjoyed being able to look at all of these projects with other people, as doing so gave us the opportunity to discuss what we thought about them. Overall, N@tM for Trimester 2 was an amazing experience and I hope to attend more events like these in the future. . | .",
            "url": "https://nvarap.github.io/blog/2023/06/05/NATM-and-Reflection.html",
            "relUrl": "/2023/06/05/NATM-and-Reflection.html",
            "date": " • Jun 5, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Javascript Checkout",
            "content": "What is my JS Checkout About? . As a game dev, my JS checkout is a game, which I call dark hallways. After Mr. Mort&#39;s statement on slack, I first, as a joke, and then actually thought about the duality of objects, such as hallways. How they can be ween in both an symbol of horror and a symbol of light. I decided to buy into this. . Breakdown of this Notebook . Start out with the HTML styling (split screen, buttons, etc.) | Talk about the logic (how button presses and functions are set, how they are managed) | Talk about use of javascript events and local storage for leaderboard purposes | Show leaderboard | . CSS and Styling . %%html &lt;!-- escape.scss (menu, leaderboard, etc.) --&gt; &lt;style&gt; // This defines a 3x3 grid $grid-template-columns: repeat(3, 1fr); $grid-template-rows: repeat(3, 1fr); .container { display:grid; grid-template-rows:auto 1fr auto; grid-template-columns:100%; /* fallback height */ min-height:100vh; /* new small viewport height for modern browsers */ min-height:100svh; } .menu{ background-color: white; text-align: center; top: 100%; } .image { display: block; margin-left: auto; margin-right: auto; width: 50%; } .button{ border-width: 3px; font-family:&#39;Times New Roman&#39;, Times, serif; width: 100px; height: 30px; } #footer{ text-align: center; color: purple; } // ... define other grid item classes as needed /* Split the screen in half */ .splitty { height: 100%; width: 50%; position: fixed; z-index: 1; top: 0; overflow-x: hidden; padding-top: 20px; } .left { left: 0; background-color: #111; } .right { right: 0; background-color: red; } &lt;/style&gt; . %%html &lt;!-- center.scss (game) --&gt; &lt;style&gt; /* Split the screen in half */ .split { height: 100%; position: fixed; z-index: 1; top: 0; overflow-x: hidden; padding-top: 20px; } /* Control the left side */ .left { left: 0; width: 60%; background-color: black; } /* Control the right side */ .right { right: 0; width: 40%; background-color: rgba(243, 230, 230, 0.176); } /* If you want the content centered horizontally and vertically */ .centered { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; } /* Style the image inside the centered container, if needed */ .centered img { width: 450px; height: 550px; } .menu { position: fixed; bottom: -300px; right: -280px; width: 500px; align-items: center; }.button { background-color: rgba(255, 255, 255, 0.441); width: 100px; height: 75px; font-size: large; font-weight: bold; font-family: &#39;Times New Roman&#39;, Times, serif; color: white; } .grid-container { display: grid; position: fixed; grid-template-columns: auto auto auto; background-color: #2195f36a; padding: 10px; bottom: 25px; right: -80px; } .grid-item { background-color: rgba(255, 255, 255, 0.8); border: 1px solid rgba(255, 255, 255, 0.8); padding: 20px; font-size: 30px; flex: 25%; text-align: center; } &lt;/style&gt; . Input/Output and Logic and use of localStorage . %%html &lt;html&gt; &lt;head&gt; &lt;title&gt; Dark Hallways &lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;center.scss&quot;&gt; &lt;/script&gt; &lt;/head&gt; &lt;script&gt; /* Player Variables */ let armor = 0; let damage = 0; var local = &quot;0&quot;; /* Logic for movement depending on locality (shorthand for where the player is) */ var all = { &quot;0&quot;: { &quot;script&quot;: &quot;You approach a dark hallway. &lt;br&gt; There appears to be something on the ground. &lt;br&gt; Pick it up?&quot;, &quot;image&quot;: &quot;hallway1.jpeg&quot;, &quot;choices&quot;: [&quot;Yes&quot;, &quot;No&quot;], &quot;results&quot; : {&quot;Yes&quot; : addToInv, &quot;No&quot;:moveTo, &quot;Yesfunc&quot; : [&quot;pistol&quot;, &quot;1&quot;], &quot;Nofunc&quot; : &quot;1&quot;} }, &quot;1&quot;: { &quot;script&quot;: &quot;There appears to be something in the distance. &lt;br&gt; The hallway spans further. &lt;br&gt; Whatever is there appears to be approaching.&quot;, &quot;image&quot;: &quot;hallway2.jpeg&quot;, &quot;choices&quot;: [&quot;Approach&quot;, &quot;Hide&quot;], &quot;results&quot; : {&quot;Approach&quot; : moveTo, &quot;Hide&quot;:moveTo, &quot;Approachfunc&quot; : &quot;3&quot;, &quot;Hidefunc&quot; : &quot;2&quot;} }, &quot;2&quot;: { &quot;script&quot;: &quot;You sit behind a couch, waiting for whatever is there to disappear &lt;br&gt; It is possible to sneak &lt;br&gt; Do we sneak or stay?&quot;, &quot;image&quot;: &quot;hallway2.jpeg&quot;, &quot;choices&quot;: [&quot;Sneak&quot;, &quot;Stay&quot;], &quot;results&quot; : {&quot;Sneak&quot; : moveTo, &quot;Stay&quot;:moveTo, &quot;Sneakfunc&quot; : &quot;6&quot;, &quot;Stayfunc&quot; : &quot;2&quot;} }, &quot;3&quot;: { &quot;script&quot;: &quot;You approach the thing... &lt;br&gt; And it attacks! &lt;br&gt; Do we fight or run?&quot;, &quot;image&quot;: &quot;hallway3.png&quot;, &quot;choices&quot;: [&quot;Fight&quot;, &quot;Run&quot;], &quot;results&quot; : {&quot;Fight&quot; : specialMove, &quot;Run&quot;:addToInv, &quot;Fightfunc&quot; : [4, 5, &#39;damage&#39;, 0], &quot;Runfunc&quot; : [&quot;Tendril&quot;, 1]} }, &quot;4&quot;: { &quot;script&quot;: &quot;You fight furiously... &lt;br&gt; But you are too weak &lt;br&gt; You fall to the maw of the monster&quot;, &quot;image&quot;: &quot;hallway3.png&quot;, &quot;choices&quot;: [&quot;End&quot;, &quot;Game&quot;], &quot;results&quot; : {&quot;End&quot; : leave, &quot;Game&quot;:leave, &quot;Endfunc&quot; : &quot;monster&quot;, &quot;Gamefunc&quot; : &quot;monster&quot;} }, &quot;5&quot;: { &quot;script&quot;: &quot;You fight furiously ... &lt;br&gt; and you destroy the monster! &lt;br&gt; You see a door beyond. Will you walk through?&quot;, &quot;image&quot;: &quot;hallway3.png&quot;, &quot;choices&quot;: [&quot;Go Through&quot;, &quot;Stay&quot;], &quot;results&quot; : {&quot;Go Through&quot; : moveTo, &quot;Stay&quot;:moveTo, &quot;Go Throughfunc&quot; : &quot;9&quot;, &quot;Stayfunc&quot; : &quot;8&quot;} }, &quot;6&quot;: { &quot;script&quot;: &quot;You sneak by the monster &lt;br&gt; and behind it you see a door. Do we stay or do we go approach the door?&quot;, &quot;image&quot;: &quot;hallway3.png&quot;, &quot;choices&quot;: [&quot;Go!&quot;, &quot;Stay&quot;], &quot;results&quot; : {&quot;Go!&quot; : moveTo, &quot;Stay&quot;:moveTo, &quot;Go!func&quot; : &quot;3&quot;, &quot;Stayfunc&quot; : &quot;7&quot;} }, &quot;7&quot;: { &quot;script&quot;: &quot;You stay inside &lt;br&gt; but you are lost within the chaos of the labyrinth &lt;br&gt; You fall in the winding labyrinth&quot;, &quot;image&quot;: &quot;hallway4.jpeg&quot;, &quot;choices&quot;: [&quot;End&quot;, &quot;Game&quot;], &quot;results&quot; : {&quot;End&quot; : leave, &quot;Game&quot;:leave, &quot;Endfunc&quot; : &quot;stay&quot;, &quot;Gamefunc&quot; : &quot;stay&quot;} }, &quot;8&quot;: { &quot;script&quot;: &quot;Your raucous fight opens a door in the damp floor &lt;br&gt; unable to keep up your balance, you fall into the ground &lt;br&gt; and fall into the infinite chasm&quot;, &quot;image&quot;: &quot;hallway5.jpg&quot;, &quot;choices&quot;: [&quot;End&quot;, &quot;Game&quot;], &quot;results&quot; : {&quot;End&quot; : leave, &quot;Game&quot;:leave, &quot;Endfunc&quot; : &quot;hole&quot;, &quot;Gamefunc&quot; : &quot;hole&quot;} }, &quot;9&quot;: { &quot;script&quot;: &quot;You escape through the door into the light. &lt;br&gt; The air feels good, and the darkness fades &lt;br&gt; You escape!&quot;, &quot;image&quot;: &quot;hallway6.jpg&quot;, &quot;choices&quot;: [&quot;End&quot;, &quot;Game&quot;], &quot;results&quot; : {&quot;End&quot; : victory, &quot;Game&quot;:victory, &quot;Endfunc&quot; : &quot;fighting&quot;, &quot;Gamefunc&quot; : &quot;fighting&quot;} } }; //TODO: Finish the sneak and the stay/go through (completion page) // Then finish up backend and leaderboard // Completed: sneak, ending of staying var playerStats = { &quot;armor&quot; : 0, &quot;damage&quot; : 0, &quot;health&quot; : 0, &quot;equipped&quot; : { &quot;damage&quot;: &quot;&quot;, &quot;armor&quot; : &quot;&quot; } } var inventory = { } var assets = { &quot;pistol&quot; : [&quot;damage&quot;, 1], &quot;vest&quot; : [&quot;armor&quot;, 2], &quot;tendril&quot; : [&quot;damage&quot;, 2] } function formatStuff(location) { local = location; console.log(&quot;Locality: &quot; + local); let point = all[location]; document.getElementById(&quot;hallwayIMG&quot;).src = &quot;images/&quot; + point[&quot;image&quot;]; document.getElementById(&quot;C1&quot;).innerHTML = point[&quot;choices&quot;][0]; document.getElementById(&quot;C2&quot;).innerHTML = point[&quot;choices&quot;][1]; document.getElementById(&quot;script&quot;).innerHTML = point[&quot;script&quot;]; } function equip(item){ inventory[item] = !inventory[item]; if (inventory[item]){ document.getElementById(&quot;err&quot;).innerHTML = item + &quot; equipped!&quot; setTimeout(function(){document.getElementById(&quot;err&quot;).innerHTML = &quot;&quot;},1000); playerStats[assets[item][0]] += assets[item][1]; playerStats[&quot;equipped&quot;][assets[item][0]] = item; } else { document.getElementById(&quot;err&quot;).innerHTML = item + &quot; unequipped.&quot; setTimeout(function(){document.getElementById(&quot;err&quot;).innerHTML = &quot;&quot;},1000); playerStats[assets[item][0]] -= assets[item][1]; } } function addToInv(stuff) { let name = stuff[0]; let location = stuff[1]; let elems = document.getElementsByName(&quot;slot&quot;); let ocured = false; for(let i = 0; i &lt; elems.length; i++){ slot = elems[i]; if(slot.innerHTML === &quot;&quot;){ var b = document.createElement(&quot;button&quot;); b.innerHTML = name b.id = name b.addEventListener(&quot;click&quot;, function(event){ equip(name) }) document.getElementById(slot.id).appendChild(b); ocured = true; document.getElementById(&quot;err&quot;).innerHTML = &quot;You picked up a &quot; + name setTimeout(function(){document.getElementById(&quot;err&quot;).innerHTML = &quot;&quot;},1000); break } } if (!ocured){ document.getElementById(&quot;err&quot;).innerHTML = &quot;Inventory Full!&quot; setTimeout(function(){document.getElementById(&quot;err&quot;).innerHTML = &quot;&quot;},1000); } moveTo(location); } function moveTo(location){ console.log(&quot;Location Passed in &quot; + location) formatStuff(location); } function specialMove(information){//)loc1, loc2, condition, parameter){ console.log(information) console.log(playerStats[information[2]] &gt; information[3]) if(playerStats[information[2]] &gt; information[3]){ moveTo(information[1]) } else { moveTo(information[0]) } } function manageFunctions(value){ console.log(local) console.log(&quot;Stuff: &quot; + document.getElementById(&#39;C2&#39;).innerHTML); let func = all[local][&quot;results&quot;]; console.log(&quot;value: &quot; + value); console.log(all[local][&quot;results&quot;]) func[value](func[value+&quot;func&quot;]); } function leave(cause){ localStorage.setItem(&quot;causeOfDeath&quot;, cause); setTimeout(() =&gt; { window.location = &#39;https://nvarap.github.io/gameover.html&#39; }, 500); } function victory(win){ localStorage.setItem(&quot;causeOfVictory&quot;, win); setTimeout(() =&gt; { window.location = &#39;https://nvarap.github.io/victory.html&#39; }, 500); } window.onload = (event) =&gt; { formatStuff(local); }; &lt;/script&gt; &lt;body style=&quot;position: relative; background-color: black;&quot;&gt; &lt;div class=&quot;split left&quot;&gt; &lt;div class=&quot;centered&quot;&gt; &lt;img src=&quot;images/hallway1.jpeg&quot; alt=&quot;Hallway1&quot; id=&quot;hallwayIMG&quot;&gt; &lt;div style=&quot;color: white;&quot;&gt; &lt;p id=&quot;script&quot;&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;split right&quot;&gt; &lt;div class=&quot;centered&quot;&gt; &lt;h1 style=&quot;position: fixed; bottom: 270px; right: -80px; color: white;&quot;&gt; Inventory &lt;/h1&gt; &lt;div class=&quot;grid-container&quot;&gt; &lt;div id=&quot;slot1&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot2&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot3&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot4&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot5&quot;name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot6&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot7&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot8&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot9&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot10&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot11&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot12&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot13&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot14&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;div id=&quot;slot15&quot; name=&quot;slot&quot; class=&quot;grid-item&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;p id=&quot;err&quot; style=&quot;position: fixed; top: 10px; right: -35px; color: white;&quot;&gt;&lt;/p&gt; &lt;div class=&quot;menu&quot;&gt; &lt;button onclick=&quot;manageFunctions(document.getElementById(&#39;C1&#39;).innerHTML)&quot; id=&quot;C1&quot; data-inline=&quot;true&quot; class=&quot;button&quot; style=&quot;margin: 0px&quot;&gt; &lt;/button&gt; &lt;button onclick=&quot;manageFunctions(document.getElementById(&#39;C2&#39;).innerHTML)&quot; id=&quot;C2&quot; data-inline=&quot;true&quot; class=&quot;button&quot; style=&quot;margin: 50px&quot;&gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . Leaderboard . backend . from flask import Blueprint, request, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/points&#39;) # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class UsrAPI: local_dic = [] # Stores all the users and IDs def newScore(front, back, diction): user_id = str(len(diction)) diction.append({&#39;name&#39;:front, &quot;points&quot;:back}) class _Create(Resource): def post(self): # simply creates the endpoint, dne otherwise body = request.get_json() UsrAPI.newScore(body.get(&quot;name&quot;), body.get(&quot;score&quot;), UsrAPI.local_dic) return {&quot;message&quot; : &quot;new person added&quot;} class _Read(Resource): def get(self): return jsonify(sorted(UsrAPI.local_dic,key=lambda x: x[&quot;points&quot;], reverse=True)) # init wikipedia by default # getJoke(id) # class _ReadWithName(Resource): # read when url have name query satisfied # def get(self, name): # return jsonify()# otherwise check with name # getRandomJoke() #class _ReadRandom(Resource): # def get(self): # return jsonify() # this exists for some reason # building RESTapi resources/interfaces, these routes are added to Web Server api.add_resource(_Create, &#39;/create&#39;) api.add_resource(_Read, &#39;/&#39;) . Frontend . %%js // fetching fetch(&#39;http://127.0.0.1:8086/api/points/&#39;) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;Network response was not ok&#39;); } return response.json(); }) .then(data =&gt; { let leaderboard = document.getElementById(&quot;leaderboard&quot;); // Process the response data console.log(data); let i = 1; data.forEach(element =&gt; { let d = document.createElement(&quot;div&quot;); d.style = &quot;color: white; width: 500px&quot;; d.innerHTML = i + &quot;. | &quot; + element[&quot;name&quot;] + &quot; | &quot; + element[&quot;points&quot;]; leaderboard.appendChild(d); i ++; }); }) .catch(error =&gt; { // Handle any errors that occurred during the request console.error(&#39;Error:&#39;, error); }); . %%js // posting var but = document.getElementById(&quot;add&quot;); but.addEventListener(&quot;click&quot;, () =&gt; { fetch(&#39;http://127.0.0.1:8086/api/points/create&#39;, { method: &#39;POST&#39;, mode: &quot;cors&quot;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, body: JSON.stringify({ &quot;name&quot; : localStorage.getItem(&quot;name&quot;), &quot;score&quot;:Math.floor(100-Math.random()*100)}) }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;Network response was not ok&#39;); } return response.json(); }) .then(data =&gt; { // Process the response data console.log(data); localStorage.clear() setTimeout(() =&gt; { window.location = &#39;https://nvarap.github.io/index.html&#39; }, 500); }) .catch(error =&gt; { // Handle any errors that occurred during the request console.error(&#39;Error:&#39;, error); }); }) .",
            "url": "https://nvarap.github.io/blog/2023/06/02/javascript-checkout.html",
            "relUrl": "/2023/06/02/javascript-checkout.html",
            "date": " • Jun 2, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "JavaScript Tutorial",
            "content": "%%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var define = null;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | .",
            "url": "https://nvarap.github.io/blog/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • May 21, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); for (var i = 0; i &lt; rows; i++){ var row = &quot;&quot; for (var j = 0; i &lt; cols; i++){ let strin = &quot;x: &quot; + i + &quot;, y: &quot; + j; row += strin; } console.log(row); } . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.6) ship() # activate/call ship function . | |/ __ |__/ ____/ - .",
            "url": "https://nvarap.github.io/blog/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "MCQ 2020",
            "content": "I did very well on my 2020 MCQ, getting a X/67 on it. . Some problems I got wrong were: . Question 17 I got this wrong because I misclicked I shouldn’t have misclicked to do 1 only instead of 1, 2, 3 | . | Question 26 I got this wrong because I did not notice that the binary nature would have resulted in not being able to store multiple values. | . | Question 64 I forgot to select 2 answers, so I only selected one of the two correct answers | . | Question 67 I did not notice that adding in maple would result in issues with the selection statement. Also with the loop resulting in issues setting count to 0. | . | . q .",
            "url": "https://nvarap.github.io/blog/work/2023/05/03/MCQLMAO.html",
            "relUrl": "/work/2023/05/03/MCQLMAO.html",
            "date": " • May 3, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Hacks Pt 1",
            "content": "from PIL import Image im = Image.open(&quot;../images/Dictionaries.png&quot;) display(im) . Hacks pt 2: List sorting algorithm . import random lst = [random.randint(1, 100) for i in range(100)] def mergeSort(arr): if len(arr) &gt; 1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] mergeSort(L) # recursion, recur to sort lists mergeSort(R) i = 0 j = 0 k = 0 while i &lt; len(L) and j &lt; len(R): if L[i] &lt;= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i &lt; len(L): arr[k] = L[i] i += 1 k += 1 while j &lt; len(R): arr[k] = R[j] j += 1 k += 1 # sort a random list print(f&quot;List before sorting: {lst}&quot;) mergeSort(lst) print(f&quot;List after sorting {lst}&quot;) . List before sorting: [46, 94, 8, 2, 9, 48, 10, 95, 5, 74, 17, 34, 86, 48, 32, 68, 87, 88, 22, 83, 60, 66, 24, 5, 20, 11, 92, 48, 85, 47, 99, 6, 71, 91, 69, 34, 65, 31, 91, 94, 1, 53, 30, 43, 13, 15, 89, 65, 23, 8, 89, 8, 84, 41, 11, 80, 25, 35, 22, 38, 98, 93, 6, 88, 1, 56, 5, 71, 93, 52, 41, 27, 56, 18, 3, 71, 52, 14, 86, 85, 38, 66, 44, 42, 52, 26, 42, 12, 2, 35, 10, 9, 10, 5, 25, 77, 11, 43, 10, 54] List after sorting [1, 1, 2, 2, 3, 5, 5, 5, 5, 6, 6, 8, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 13, 14, 15, 17, 18, 20, 22, 22, 23, 24, 25, 25, 26, 27, 30, 31, 32, 34, 34, 35, 35, 38, 38, 41, 41, 42, 42, 43, 43, 44, 46, 47, 48, 48, 48, 52, 52, 52, 53, 54, 56, 56, 60, 65, 65, 66, 66, 68, 69, 71, 71, 71, 74, 77, 80, 83, 84, 85, 85, 86, 86, 87, 88, 88, 89, 89, 91, 91, 92, 93, 93, 94, 94, 95, 98, 99] . Hacks 4 . from PIL import Image im = Image.open(&quot;/Users/vn1/myblog/blog/_notebooks/images/kahoot.png&quot;) display(im) . Simulation . A basic dice simulation and more complex hardy-weinburg simulations . Hardy-Weinburg . import random per = {} dice = int(input(&quot;What sided die would you like to test? &quot;)) times = int(input(&quot;How many times do you want to test this? &quot;)) for i in range(times): num = random.randint(1, dice) if num not in per: per[num] = 1 else: per[num] += 1 keys = list(per.keys()) keys.sort() for key in keys: print(f&quot;{key} appeared {[per[key]]}/{times} or about {per[key]/times*100}%&quot;) print(f&quot;Expected average for a {dice} sided die: {1/dice*100}%&quot;) . 1 appeared [490]/10000 or about 4.9% 2 appeared [535]/10000 or about 5.35% 3 appeared [480]/10000 or about 4.8% 4 appeared [472]/10000 or about 4.72% 5 appeared [492]/10000 or about 4.92% 6 appeared [497]/10000 or about 4.97% 7 appeared [485]/10000 or about 4.8500000000000005% 8 appeared [523]/10000 or about 5.2299999999999995% 9 appeared [493]/10000 or about 4.93% 10 appeared [529]/10000 or about 5.29% 11 appeared [537]/10000 or about 5.37% 12 appeared [497]/10000 or about 4.97% 13 appeared [491]/10000 or about 4.91% 14 appeared [528]/10000 or about 5.28% 15 appeared [500]/10000 or about 5.0% 16 appeared [500]/10000 or about 5.0% 17 appeared [487]/10000 or about 4.87% 18 appeared [516]/10000 or about 5.16% 19 appeared [473]/10000 or about 4.73% 20 appeared [475]/10000 or about 4.75% Expected average for a 20 sided die: 5.0% .",
            "url": "https://nvarap.github.io/blog/2023/04/28/simualtionhacks.html",
            "relUrl": "/2023/04/28/simualtionhacks.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Building Simulation/Interaction using Lists and Iteration - Student Copy",
            "content": "Vocabulary . Iteration - Repitition of a Process | For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | increment/decrement - Modifies the counter variable after each repetition. | Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | Key - the unique identifier associated with a value in a dictionary, such as name | Value - the data associated with a key in a dictionary, such as age | Pair - a key-value combination in a dictionary, such as a person&#39;s name + age | Mutable - the ability to be changed or modified | Tuple - an immutable ordered sequence of elements, similar to a list | Insertion - the process of adding a new key-value pair to a dictionary | Deletion - the process of removing a key-value pair from a dictionary | Keys method/keys() - a built-in Python function that returns a list of all keys in a dictionary | Values method/values() - a built-in Python function that returns a list of all values in a dictionary | Items method/items() - a built-in Python function that returns a list of all key-value pairs in a dictionary as tuples | Update method/update() - a built-in Python function that updates a dictionary with key-value pairs from another dictionary or iterable | Clear method/clear() - a built-in Python function that removes all key-value pairs from a dictionary | . Questions: . Give an example of iteration. | What is the difference between a for loop and while loop? That is, when would you use a for loop and when would you use a while loop? | In the APCSP AP exam, what number do indexes start with? important to know | Are dictionaries and lists mutable? | Simulations/Interactions . Building a simulation o#r interaction using lists and iteration in VS Code can be accomplished using a few simple steps: . Define your data: First, you need to define the data that your simulation will be working with. This could be a list of numbers, a list of strings, or any other type of data that your simulation will be manipulating. . | Write your simulation code: Once you have defined your data, you can start writing the code for your simulation. This code will typically involve iterating over your list of data, performing some operation on each item in the list, and updating the list accordingly. . | Test your simulation: After you have written your simulation code, it is important to test it to make sure it is working as expected. You can do this by running your code and checking the output to see if it matches what you expect. . | Refine your simulation: Once you have tested your simulation, you may need to refine it based on the results. This could involve tweaking the code to make it more efficient, adding new features, or fixing any bugs that you have discovered. . | Pros: Cost efficient Accurate . Cons: limits Simplify Bias . Why use simulations? . Simulations can be useful because they can emulate real world situations without needing excessive resources (ex: money), time, or equipment. For example, a simulation of the effectiveness of a new seatbelt or airbag can be performed by simulating car crashes. This would be better than doing it in real life because you wouldn&#39;t want to place people in cars and then crash them for obvious reasons. | However, simulatins do assume things about the real world and can have biases. They can be oversimplified because the real world often has more complications and factors that can affect something. In the case of our car crash simulation, other things can have a big impact, such as the weather and experience of the driver. However, these things can sometimes be held constant in the simulations. | . Questions: . Explain an example of something you could simulate. Cell growth, probabilistic scenario. | . | Why are simulations useful and important? Simulations are useful because they are more cost efficient and can be used to accurately gauge processes. | . | Here&#39;s a simple example of a simulation in Python that uses lists and iteration to calculate the average of a list of numbers: . numbers = [1, 2, 3, 4, 5] # Initialize the sum and count variables sum = 0 count = 0 # Iterate over the list of numbers, adding each number to the sum for number in numbers: sum += number count += 1 # Calculate the average of the list of numbers average = sum / count # Print the average print(&quot;The average of the list is:&quot;, average) . The average of the list is: 3.0 . This code defines a list of numbers, iterates over the list to calculate the sum and count of the numbers, and then calculates the average by dividing the sum by the count. Finally, it prints the average to the console. . Lists . Iteration statements can be used to traverse a list | Knowldege of exisiting algorithms that use iteration can help in constructing new algorithms. Some are: Determining a minimum or maximum value in a list | Computing a sum or average of a list of numbers | . | . What are Lists? . Lists are iterables, and indexed. | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing (Collegeboard is base 1, the psychopaths). | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . Nested Lists . Used to create matrices, 2D arrays to represent on a 2D grid, land, etc. | . Uses of Nested lists . Placing lists within lists allows you to have arrays of similar data together, and create complexity. . Some uses include: . Creating 2d Arrays | Storing similar, but slightly different categories (sublists) | Create a matrix | . Iteration . Iterative statements are also called loop and they repeat themselves over and over until the condition for stopping is met. . In College Board&#39;s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. | . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . Conceptually, a while loop is very similar to an if conditional, except that a while is continually executed until it&#39;s no longer true and an if is only executed once. . Questions: . Describe a situation where you would need iteration. Iterating over a list of numbers | . | Describe the difference between a &quot;REPEAT n TIMES&quot; loop VS a &quot;REPEAT UNTIL (condition)&quot; loop. it is important you know this for the AP Exam . | Libaries . A software library contains procedures that may be used in creating new programs. | Existing code segments can come from internal or external sources, such as libaries or previously written code. | The use of libaries simplifies the task of creating complex programs. | . APIs . Application program interfaces (APIs) are specifications for how the procedures in a libary behave and can be used as documentation for an API/libary is necessary in understanding the behaviors provided by the API and how to use them. . A file that contains procedures that can be used in a program is considered a libary. . API provides specifications for how procedures in a library behave and can be used. | Many companies use APIs for programmers to interact with their products. | . Questions: . What are some libraries that we&#39;ve learned about? What are their advantages/disadvantages? | Dictionaries . What are Dictionaries? . an unordered collection of key-value pairs, where each key is unique and associated with a specific value | known as associative arrays, maps, or hash tables in some programming languages | used to store and retrieve data efficiently, as they allow fast access to values based on their associated keys | useful for a wide range of tasks, such as storing, indexing, and counting | . What are the types of Dictionaries? . Ordered Dictionaries . Iterates over keys and values in the same order that the keys were inserted | If an entry is deleted and reinserted, then it will be moved to the end of the dictionary | Specially designed to keep its items ordered | Useful in situations where the order of insertion is important and when you need to process data in a specific order | If the order of the data is important, an ordered dictionary is the better choice | . How to create an ordered dictionary? . Import OrderedDict from collections | Create an empty ordered dictionary by instantiating OrderedDict without providing arguments to the constructor | Add key-value pairs to the dictionary by providing a key in square brackets ([]) and assigning a value to that key. | Print the ordered dictionary | Iterate over the items in the ordered dictionary | Regular Dictionaries . Mutable; can add, remove, and modify key-value pairs after they have been created | Used to store data values in key:value pairs | Can be iterated over using loops | If order is not important, a regular dictionary may provide better performance | . How to create a regular dictionary? . Create a variable name which will be the name of the dictionary | Assign the variable to an empty set of curly braces {} | Create a dictionary with the dict() OR empty curly brackets | Questions: . Compare and contrast lists and dictionaries. lists are just separate values. Dictionaries have keys to each value. | . | Do dictionary keys need to be unique? Yessir 🫡 | . | folklore_album = { &quot;title&quot;: &quot;Folklore&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2020, &quot;genre&quot;: [&quot;Alternative/Indie&quot;, &quot;Pop&quot;], &quot;tracks&quot;: { # dictionaries can have different, nested dictionaries. 1: [&quot;the 1&quot;, 7], 2: [&quot;cardigan&quot;, 9], 3: [&quot;the last great american dynasty&quot;, 7], 4: [&quot;exile (ft. Bon Iver)&quot;, 10], 5: [&quot;my tears ricochet&quot;, 7], 6: [&quot;mirrorball&quot;, 6], 7: [&quot;seven&quot;, 5], 8: [&quot;august&quot;, 7], 9: [&quot;this is me trying&quot;, 7], 10: [&quot;illicit affairs&quot;, 8], 11: [&quot;invisible string&quot;, 6], 12: [&quot;mad woman&quot;, 7], 13: [&quot;epiphany&quot;, 6], 14: [&quot;betty&quot;, 8], 15: [&quot;peace&quot;, 9], 16: [&quot;hoax&quot;, 7], 17: [&quot;the lakes&quot;, 6] } } # Printing the dictionary print(folklore_album) . {&#39;title&#39;: &#39;Folklore&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2020, &#39;genre&#39;: [&#39;Alternative/Indie&#39;, &#39;Pop&#39;], &#39;tracks&#39;: {1: [&#39;the 1&#39;, 7], 2: [&#39;cardigan&#39;, 9], 3: [&#39;the last great american dynasty&#39;, 7], 4: [&#39;exile (ft. Bon Iver)&#39;, 10], 5: [&#39;my tears ricochet&#39;, 7], 6: [&#39;mirrorball&#39;, 6], 7: [&#39;seven&#39;, 5], 8: [&#39;august&#39;, 7], 9: [&#39;this is me trying&#39;, 7], 10: [&#39;illicit affairs&#39;, 8], 11: [&#39;invisible string&#39;, 6], 12: [&#39;mad woman&#39;, 7], 13: [&#39;epiphany&#39;, 6], 14: [&#39;betty&#39;, 8], 15: [&#39;peace&#39;, 9], 16: [&#39;hoax&#39;, 7], 17: [&#39;the lakes&#39;, 6]}} . for i in folklore_album[&quot;tracks&quot;]: print(&quot;track #&quot; + str(i) + &quot;: &quot; + folklore_album[&quot;tracks&quot;][i][0]) print(&quot; my rating: &quot; + str(folklore_album[&quot;tracks&quot;][i][1]) + &quot;/10&quot;) . track #1: the 1 my rating: 7/10 track #2: cardigan my rating: 9/10 track #3: the last great american dynasty my rating: 7/10 track #4: exile (ft. Bon Iver) my rating: 10/10 track #5: my tears ricochet my rating: 7/10 track #6: mirrorball my rating: 6/10 track #7: seven my rating: 5/10 track #8: august my rating: 7/10 track #9: this is me trying my rating: 7/10 track #10: illicit affairs my rating: 8/10 track #11: invisible string my rating: 6/10 track #12: mad woman my rating: 7/10 track #13: epiphany my rating: 6/10 track #14: betty my rating: 8/10 track #15: peace my rating: 9/10 track #16: hoax my rating: 7/10 track #17: the lakes my rating: 6/10 . Code Examples . Reverse a list utilizing features of lists and iteration . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list # or just original_list.reverse() print(&quot;List after reverse, using .reverse() : &quot;, original_list) # this does mutate the list, however print(&quot;List after reverse, using provided iteration : &quot;, reversed_list) # does not mutate list. better to avoid side effects . List before reverse : [1, 2, 3, 4, 5] List after reverse, using .reverse() : [5, 4, 3, 2, 1] List after reverse, using provided iteration : [5, 4, 3, 2, 1] . Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array. Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Here is a list comprehension example, using lists to create lists. . Below, only songs in the folklore album that have less than 7 characters in their titles are printed. . TS_folklore = [&quot;exile&quot;, &quot;my tears ricochet&quot;, &quot;this is me trying&quot;, &quot;illicit affairs&quot;, &quot;august&quot;, &quot;mirrorball&quot;, &quot;betty&quot;, &quot;mad woman&quot;, &quot;epiphany&quot;, &quot;peace&quot;, &quot;cardigan&quot;] # this list is only songs that have less than 10 characters in the title TS_folklore_updated = [x for x in TS_folklore if len(x) &lt; 7] print(&quot;These are the songs in Taylor Swift&#39;s folklore album that have less than 7 characters in their title&quot;) print(TS_folklore_updated) . These are the songs in Taylor Swift&#39;s folklore album that have less than 7 characters in their title [&#39;exile&#39;, &#39;august&#39;, &#39;betty&#39;, &#39;peace&#39;] . Below, only songs that have a rating greater than 7 will be printed. . TS_folklore_ratings = {&quot;exile&quot;: 8, &quot;my tears ricochet&quot;: 6, &quot;this is me trying&quot;: 7, &quot;illicit affairs&quot;: 8, &quot;august&quot;: 4, &quot;mirrorball&quot;: 3, &quot;betty&quot;: 6, &quot;mad woman&quot;: 6, &quot;epiphany&quot;: 2, &quot;peace&quot;: 10, &quot;cardigan&quot;: 10} TS_folklore_best = {k:v for (k,v) in TS_folklore_ratings.items() if v&gt;7} print(&quot;These are the songs in Taylor Swift&#39;s folklore album that I give a rating greater than 7&quot;) print(TS_folklore_best) . These are the songs in Taylor Swift&#39;s folklore album that I give a rating greater than 7 {&#39;exile&#39;: 8, &#39;illicit affairs&#39;: 8, &#39;peace&#39;: 10, &#39;cardigan&#39;: 10} . Questions: . How is list comprehension similar to iteration? |",
            "url": "https://nvarap.github.io/blog/student/2023/04/28/P4Y-Simulation-Lists-Iteration.html",
            "relUrl": "/student/2023/04/28/P4Y-Simulation-Lists-Iteration.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "SASS Element Hacks",
            "content": "Classwork . . Toggle Theme What are the 5 basic UI elements . Input | Navigation | Buttons | Text | Images | SASS SASS allows for greater variable storage of colors and various different styles. They are also far more compatible with various different ideas. . Advanced The @keyframes tag allows for us to store and recognize a set of keyframes. This is used in combination of the animation property. Fade class could be used to help run these animations as well. . Number Guessing Game It works by checking a number guessed in order to see if it is higher or lower, and then setting a text marker to be as such. Then, it will change color of the background depending on whether the answer is correct or incorrect . SASS makes this more appealing by adding color, so it isn’t just black-and-white . Hacks . . &lt;html&gt; &lt;head&gt; &lt;title&gt;Guess the Number&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Guess the Number&lt;/h1&gt; &lt;p&gt;Try to guess the number between 1 and 100.&lt;/p&gt; &lt;input type=&quot;text&quot; id=&quot;guess&quot; placeholder=&quot;Enter your guess&quot;&gt; &lt;button onclick=&quot;checkGuess()&quot;&gt;Submit&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;script&gt; // Generate a random number between 1 and 100 const randomNumber = Math.floor(Math.random() * 100) + 1; let attempts = 0; function checkGuess() { // Get the user&#39;s guess const guess = parseInt(document.getElementById(&quot;guess&quot;).value); // Increase the number of attempts attempts++; // Check if the guess is correct if (guess === randomNumber) { document.getElementById(&quot;result&quot;).innerHTML = `Congratulations! You guessed the number in ${attempts} attempts.`; } else if (guess &lt; randomNumber) { document.getElementById(&quot;result&quot;).innerHTML = &quot;Too low. Guess again.&quot;; } else { document.getElementById(&quot;result&quot;).innerHTML = &quot;Too high. Guess again.&quot;; } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Game . Steps: . Clone this repo https://github.com/nVarap/darkhallways.git | Make sure you have the “live server” extension in vscode | Open the repository, right click the index.html file, and click “open with live server” | that should make it work. Contact me if it does not. |",
            "url": "https://nvarap.github.io/blog/work/2023/04/27/cd.html",
            "relUrl": "/work/2023/04/27/cd.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "The Scenario",
            "content": "Numpy and Pandas are powerful tools for data preprocessing in predictive analysis. Numpy can be used to perform mathematical operations on arrays and matrices, while Pandas can be used to manipulate and analyze structured data such as tables. Some common preprocessing tasks that can be performed with these tools include cleaning and formatting data, handling missing values, and transforming data into numerical formats suitable for machine learning algorithms. | There are many different machine learning algorithms that can be used for predictive analysis, including linear regression, logistic regression, decision trees, random forests, neural networks, and support vector machines. These algorithms differ in their underlying mathematical models, complexity, and performance characteristics. For example, linear regression models assume a linear relationship between the input and output variables, while neural networks can model highly nonlinear relationships. | Predictive analysis has many real-world applications across a variety of industries. Some examples include fraud detection in finance, predictive maintenance in manufacturing, demand forecasting in retail, and patient risk assessment in healthcare. | Feature engineering is the process of selecting, extracting, and transforming relevant features from raw data to improve model accuracy. This can involve techniques such as feature scaling, dimensionality reduction, and feature selection. By carefully selecting and engineering features, it is often possible to improve model accuracy and reduce overfitting. | Machine learning models can be deployed in real-time applications using a variety of technologies such as REST APIs, cloud platforms, and containerization. These technologies allow models to be deployed and scaled rapidly to meet the demands of real-world applications. | Numpy and Pandas are very powerful tools, but they do have some limitations. For example, they may not be the best choice for working with extremely large datasets, or for performing complex statistical analyses. In such cases, other tools such as Apache Spark or R may be more appropriate. | Predictive analysis can be used to improve decision-making and optimize business processes in a variety of ways. For example, it can help businesses identify high-risk customers, forecast demand for products, and optimize production schedules. By using data-driven insights to inform decisions, businesses can improve efficiency, reduce costs, and increase profitability. | import numpy as np from sklearn.linear_model import LinearRegression # Define the training data X_train = np.array([[1000], [1500], [2000], [2500], [3000]]) y_train = np.array([50000, 75000, 150000, 180000, 200000]) # Create and fit the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Define the test data X_test = np.array([[1200], [1800], [2200], [2800], [3200]]) # Make predictions on the test data y_pred = model.predict(X_test) # Print the predicted prices print(y_pred) . [ 66200. 114800. 147200. 195800. 228200.] . The two primary data structures in Pandas are Series and DataFrame. Series is a one-dimensional labeled array that can hold any data type, including integers, floats, strings, and Python objects. DataFrame is a two-dimensional labeled data structure with columns of potentially different types. | To read a CSV file into a Pandas DataFrame, you can use the read_csv() function. | import pandas as pd df = pd.read_csv(&quot;example_name.csv&quot;) . To select a single column from a Pandas DataFrame, you can use the indexing operator [] with the name of the column. | age_column = df[&quot;age&quot;] . To filter rows in a Pandas DataFrame based on a condition, you can use boolean indexing. | filtered_df = df[df[&quot;age&quot;] &gt; 30] . To group rows in a Pandas DataFrame by a particular column, you can use the groupby() function. | grouped_df = df.groupby(&quot;gender&quot;) . To aggregate data in a Pandas DataFrame using functions like sum and mean, you can use the agg() function. For example, to calculate the sum and mean of the &quot;age&quot; column for each group in a grouped DataFrame named grouped_df, you can use the following code: | aggregated_df = grouped_df.agg({&quot;age&quot;: [&quot;sum&quot;, &quot;mean&quot;]}) . To handle missing values in a Pandas DataFrame, you can use the fillna() function to fill the missing values with a specific value or method, or use the dropna() function to remove rows or columns that contain missing values. | To merge two Pandas DataFrames together, you can use the merge() function. | merged_df = pd.merge(df1, df2, on=&quot;id&quot;) . To export a Pandas DataFrame to a CSV file, you can use the to_csv() function. For example, to export a DataFrame named df to a file named output.csv located in the current directory, you can use the following code: | df.to_csv(&quot;output.csv&quot;, index=False) . The main difference between a Series and a DataFrame in Pandas is that a Series is a one-dimensional labeled array, while a DataFrame is a two-dimensional labeled data structure with columns of potentially different types. A DataFrame can be thought of as a collection of Series objects, where each column represents a Series. |",
            "url": "https://nvarap.github.io/blog/2023/04/27/TenserflowHack.html",
            "relUrl": "/2023/04/27/TenserflowHack.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Duck DNS Website",
            "content": "Hack 1 . Pros of Duck DNS: . Its free, and allows you to access domain services that allow users to assign a domain name specific to their website. | Access a device using a specific host name. Convenient as opposed to a port or other host name | Can use HTTPS or other form of hashing algorithm in order to protect data | Domain names can be custom in order to make stuff more accessible | . Cons of Duck DNS: . Not suitable for larger projects, or maybe unable to be scaled. | Depends on the connection of the device to the domain service, no direct connection in a way like ethernet or other form of connection | . . Hacks 2 . We use a DNS in order to host our flask projects on a local server in order to make sure that those who are on the internet can access our flask pages. DuckDNS takes our flask and hosts it on a local server stored in a server room elsewhere int eh world, sharing our information from our device and our AWS container to that server which attaches our hosted version to a different port, under a different name, thus allowing it to be hosted. To setup using duck DNS, we have to (1) Sign in with your DuckDNS account by selecting “Sign in with Github” (2) Then create a subdomain using (3) Change the IP address to the one you would like to link to(4) Click the IP address button and link to your subdomain. . Hack 3 (Not doing) . Hack 4 . I do not currently have any confusions regarding deployment. I found the process rather intuitive, and really the commands to be the primary issues. Mainly outdated and conflicting dependencies as a result of there being numerous people on the same instance. Also, there are some issues with the number of internet connections that need to occur in order to reach,a dn there are also issues with the idea of PUSD internet interfering with the process. Many of the issues we see really do happen because there aren’t necessarily fixes we see online. These are extreme corner cases that we come upon by sheer coincidence. . Hack 5 . . Hacks 6 . Hello, varalu running /Users/vn1/home/anaconda3/bin/python You will be asked 11 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : What does Domain Name Server represent? DNS is correct! Good Job! Question 2 : What does this Represent: Amazon Web Services, which is a cloud computing platform provided by Amazon. AWS is correct! Good Job! Question 3 : What is the first Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 1 is correct! Good Job! Question 4 : What is the third Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 3 is correct! Good Job! Question 5 : What is the fourth Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 4 is correct! Good Job! Question 6 : What is the second Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 2 is correct! Good Job! Question 7 : What files are you supposed to edit after finishing the first steps of setting up the server and cloning it within the AWS Server? 1: Edit the docker files and docker.yml, 2: Edit the main.py file to change the characteristcs. 1 is correct! Good Job! Question 8 : What is the first step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 1 is correct! Good Job! Question 9 : What is the second step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 3 is correct! Good Job! Question 10 : What is the third step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 2 is correct! Good Job! Question 11 : What is the fourth step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 4 is correct! Good Job! varalu you scored 11/11 Total Percentage: 100.00% . KASM Hacks . Virtual desktops and KASM (Kernel Adaptive Security Module) provide a secure environment to access data without compromising the host’s system. In an APCSP, we can use KASM to create a controlled environment with which students can contribute to code without suffering the consequences. Additionally, virtual desktops can be useful for facilitating collaboration among students and enabling remote instruction. VNCs could be used for cross-platform or long-distance collaboration, as we see with splashtop in the CTE department. . KASM Team Work . . AWS Database Quizzes . Quiz 1 . C | D | C | Quiz 2 . C | A | C | Certbot hacks . Certbot Hacks 1: . I could not install the Certbot package, and thus was unable to get a screenshot of Certbot working . Certbot Hacks 2: . OpenSSL is an open-source implementation of SSL/TLS protocols that is widely used for secure communication on the Internet. It offers a range of cryptographic features, including encryption, decryption, digital signatures, and hash functions. LibreSSL, on the other hand, is a fork of OpenSSL that was created in 2014 after the discovery of the Heartbleed vulnerability. In terms of security features, both OpenSSL and LibreSSL offer similar capabilities, such as support for strong cryptographic algorithms, certificate validation, and secure key management. In March 2021, OpenSSL released a security advisory that addressed three vulnerabilities, including a high-severity flaw that could allow an attacker to perform a denial-of-service attack or execute arbitrary code on a vulnerable system. .",
            "url": "https://nvarap.github.io/blog/work/2023/04/26/a.html",
            "relUrl": "/work/2023/04/26/a.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "P4-Y 4/25 Guide to SASS",
            "content": "WGET this file and complete fully and thoroughly in order to be receive credit . Wget Link . Team Lesson Plan: . SASS Part 1- Nathan, Aniket, Kalani . Basic UI Properties and what they mean | Color properties | Themes | SASS Definition/What it is useful for | SASS code segments w/ comparison to css | Demonstration of SASS | . SASS Part 2- Max W, Evan . More UI Properties | UX | Layouts | Animation/animation code for UI | . Building JavaScript Game or Application- Ryan, Jaden . Before vs After Minesweeper Game - how to customize | Building a java script game and what it requires | . Hacks Page - Kalani, Max T . Students must create their own hack (simple app,game, etc using key components from the lesson) | Make sure the students can wget the file so they can work on it for their hacks | . Classwork: . What are 5 Basic UI Elements?: . div | p | header | body | In your own words, explain what SASS does: . SASS is an extension of CSS, allowing for more intuitive and scalable UI design through variables. | . What are some benefits to SASS?: . More intuitive | More stuff that can be used, such as variables that can be used. | . Describe/Explain one of the more &quot;advanced&quot; SASS properties below in detail: . @media can be used to determine the medium, such as the device, that is used with the application, allowing for change | . Link to Number Guesser Game . How does the number guesser game work? . It takes input via an input tag, checks it to the number that has been guessed, and then determines whether they have been chosen. | . Explain how SASS can be used to make the number guesser game look more visually appealing? . SASS can be used to alter the background and the various text colors in the image, as opposed to just simply having a blank white screen at any point in time. | . Hacks - Insert any screenshots, code segments, etc. that you need to in order to demonstrate an understanding of the hacks . Hacks Part 1 . Add your own element to your own repository to make it unique (0.9) | Hacks Part 2 . Add the style change button to your own github page (0.9) Change the button to your own styles | See if you can let make it change to multiple different styles (we understand that it is hard to create multiple distinct styles so you are only required to make it clear you have at least three different styles at can be changed) | . | Extra: Try and incorporate something you learned in the lesson into your CPT Project (0.1) | Hacks Part 3 . Add SASS to Number Guesser Game provided (0.9) or create your own Javascript game/application and add SASS to it (0.9+) | We will collectively decide on the &quot;best&quot; game/app and award potential seed. | Copy and paste the following code segment into a markdown file which will be used for the hacks: . Guess the Number . Guess the Number . Try to guess the number between 1 and 100. . Submit . .",
            "url": "https://nvarap.github.io/blog/student/2023/04/25/P4Y-SASSGuide.html",
            "relUrl": "/student/2023/04/25/P4Y-SASSGuide.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: | Memory in GB: | Storage in GB: | OS: | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://nvarap.github.io/blog/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Numpy, Pandas, and Tenser Flow",
            "content": "What is Numpy? . It stands for Numerical python. It is a python package which is used to perform a wide variety of mathematical operations on arrays and works faster than a regular python list. . What can we do with Numpy? . One of the easiest things to do with Numpy is to change the shape of an array . import numpy as np a = np.array([1, 2, 3, 4, 5, 6]) print(a) b = np.reshape( a, # the array being reshaped (2,3) # dimensions of the new array ) print(b) c = np.reshape( a, (6,1) ) print(c) . [1 2 3 4 5 6] [[1 2 3] [4 5 6]] [[1] [2] [3] [4] [5] [6]] . Create two dimensional array. . a_list = [[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]] d = np.array([a_list]) d . array([[[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]]) . Accessing Elements: Can find a specific index, similar to regular python lists . z1 = np.random.randint (10, size=6) z1[0] # Find an index . 8 . z1[0:2] # Create an array of the specified range . array([2, 8]) . z1[-1] # Get last element of the list . 6 . Using Numpy With Images . from skimage import io photo = io.imread(&#39;san_diego.jpg&#39;) type(photo) . numpy.ndarray . import matplotlib.pyplot as plt plt.imshow(photo) photo.shape . (549, 976, 3) . Output a mirror image . plt.imshow(photo[::-1]) . &lt;matplotlib.image.AxesImage at 0x7f8c20a3d9d0&gt; . Find specific part of the image by putting axes into an array . plt.imshow(photo[150:400, 675:775]) . &lt;matplotlib.image.AxesImage at 0x7f8c1885d520&gt; . Reduce the size of an image . plt.imshow(photo[::2, ::2]) . &lt;matplotlib.image.AxesImage at 0x7f8c18830f70&gt; . Can use Numpy math functions to find values related to an image . photo photo_sin = np.sin(photo) photo_sin . array([[[-0.355 , 0.8857 , 0.9946 ], [-0.355 , 0.8857 , 0.9946 ], [-0.355 , 0.8857 , 0.9946 ], ..., [ 0.3467 , -0.9985 , -0.5063 ], [ 0.9766 , -0.491 , 0.452 ], [ 0.9766 , -0.491 , 0.452 ]], [[-0.355 , 0.8857 , 0.9946 ], [-0.355 , 0.8857 , 0.9946 ], [-0.355 , 0.8857 , 0.9946 ], ..., [ 0.9766 , -0.491 , 0.452 ], [ 0.9766 , -0.491 , 0.452 ], [ 0.9766 , -0.491 , 0.452 ]], [[-0.355 , 0.8857 , 0.9946 ], [-0.355 , 0.8857 , 0.9946 ], [-0.355 , 0.8857 , 0.9946 ], ..., [ 0.9766 , -0.491 , 0.452 ], [ 0.7085 , 0.4678 , 0.9946 ], [ 0.7085 , 0.4678 , 0.9946 ]], ..., [[-0.404 , -0.677 , 0.869 ], [-0.1323 , -0.02655, 0.721 ], [ 0.9907 , -0.5586 , -0.46 ], ..., [-0.906 , -0.9663 , -0.1935 ], [-0.846 , -0.305 , -0.8115 ], [-0.906 , -0.305 , -0.7905 ]], [[ 0.5513 , -0.9854 , 0.8857 ], [ 0.5293 , -0.3877 , -0.9424 ], [-0.988 , 0.774 , 0.6963 ], ..., [-0.846 , -0.7393 , -0.1935 ], [-0.751 , -0.5215 , 0.9727 ], [-0.2878 , -0.5586 , -0.1935 ]], [[-0.751 , -0.305 , 0.5806 ], [-1. , 0.987 , 0.785 ], [-0.757 , 0.0177 , -0.09717], ..., [-0.846 , 0.92 , -0.93 ], [ 0.6504 , -0.9995 , -0.616 ], [-1. , 0.6704 , -0.46 ]]], dtype=float16) . Numpy Hacks . For your hacks, use matplotlib and numpy to slice this image to display Waldo. Also find and display one other numpy function and blog about what it is used for. . photo_a = io.imread(&#39;waldo.jpg&#39;) type(photo_a) plt.imshow(photo_a) . &lt;matplotlib.image.AxesImage at 0x7f8c18782f70&gt; . What is Pandas? . Pandas is an open source Python package which is used for data analysis and machine learning. Pandas is built using numpy which supports it using multidimensional arrays such as what is shown below: . Data can then be manipulated using pandas to do all sorts of different things such as data cleaning, statistical analysis, and data visualization. Below is an example of data visualization in a table using pandas. . import pandas as pd pd.__version__ . &#39;1.4.2&#39; . classes = pd.Series([&quot;Mathematics&quot;,&quot;Chemistry&quot;,&quot;Physics&quot;,&quot;History&quot;,&quot;Geography&quot;,&quot;German&quot;]) grades = pd.Series([90,54,77,22,25]) pd.DataFrame({&quot;Classes&quot;: classes, &quot;Grades&quot;: grades}) . Classes Grades . 0 Mathematics | 90.0 | . 1 Chemistry | 54.0 | . 2 Physics | 77.0 | . 3 History | 22.0 | . 4 Geography | 25.0 | . 5 German | NaN | . What is TenserFlow? . Tensor Flow is a machine learning platform which has tools to validate and transform large datasets and also provides standard datasets for machine learning training. . An example of this is the fashion MNIST (Modified National Institute of Standards and Technology) database: . In this dataset there are many pictures which are each28x28 Numpy arrays. . Setting up . This will train a neural network model to identify pictures of clothing. We will use tf.keras, a high-level API to build and train models in TensorFlow. . import tensorflow as tf # Helper libraries import numpy as np import matplotlib.pyplot as plt print(tf.__version__) . 2.12.0 . We will use the Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. Here we will load the database. . fashion_mnist = tf.keras.datasets.fashion_mnist (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() . Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz 29515/29515 [==============================] - 0s 0us/step Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz 26421880/26421880 [==============================] - 2s 0us/step Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz 5148/5148 [==============================] - 0s 0us/step Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz 4422102/4422102 [==============================] - 0s 0us/step . This dataset loads 4 NumPy arrays: train_images and train_labels arrays are the training set, used for the models to learn test_images and test_labels arrays test the accuracy . Each imaged is mapped to a label. The class names are not included with the dataset, store them here to use later when plotting images: . class_names = [&#39;T-shirt/top&#39;, &#39;Trouser&#39;, &#39;Pullover&#39;, &#39;Dress&#39;, &#39;Coat&#39;, &#39;Sandal&#39;, &#39;Shirt&#39;, &#39;Sneaker&#39;, &#39;Bag&#39;, &#39;Ankle boot&#39;] . Let&#39;s explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels: . train_images.shape . (60000, 28, 28) . Likewise, there are 60,000 labels in the training set: . len(train_labels) . 60000 . Each label is an integer between 0 and 9: . train_labels . array([9, 0, 0, ..., 3, 0, 5], dtype=uint8) . There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels: . test_images.shape . (10000, 28, 28) . And the test set contains 10,000 images labels: . len(test_labels) . 10000 . Preprocessing data . The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255: . plt.figure() plt.imshow(train_images[0]) plt.colorbar() plt.grid(False) plt.show() . Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It&#39;s important that the training set and the testing set be preprocessed in the same way: . train_images = train_images / 255.0 test_images = test_images / 255.0 . To verify that the data is in the correct format and that you&#39;re ready to build and train the network, let&#39;s display the first 25 images from the training set and display the class name below each image. . plt.figure(figsize=(10,10)) for i in range(25): plt.subplot(5,5,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() . Building the neural network requires configuring the layers of the model, then compiling the model. . The basic building block of a neural network is the layer. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand. . Most of deep learning consists of chaining together simple layers. Most layers, such as tf.keras.layers.Dense, have parameters that are learned during training. . model = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation=&#39;relu&#39;), tf.keras.layers.Dense(10) ]) . The first layer in this network, tf.keras.layers.Flatten, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data. . After the pixels are flattened, the network consists of a sequence of two tf.keras.layers.Dense layers. These are densely connected, or fully connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second layer returns a logits array with length of 10. Each node contains a score that indicates the current image belongs to one of the 10 classes. . Before the model is ready for training, it needs a few more settings. These are added during the model&#39;s compile step: . Loss function —This measures how accurate the model is during training. You want to minimize this function to &quot;steer&quot; the model in the right direction. | Optimizer —This is how the model is updated based on the data it sees and its loss function. | Metrics —Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified. | . model.compile(optimizer=&#39;adam&#39;, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=[&#39;accuracy&#39;]) . Training . Training the neural network model requires the following steps: . Feed the training data to the model. (train_images and train_labels arrays.) | The model learns to associate images and labels. | You ask the model to make predictions about a test set (test_images array) | Verify that the predictions match the labels from the test_labels array. | . To start training, call the model.fit method . model.fit(train_images, train_labels, epochs=10) . Epoch 1/10 . 2023-04-04 11:53:51.070373: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 188160000 exceeds 10% of free system memory. . 1875/1875 [==============================] - 11s 6ms/step - loss: 0.4959 - accuracy: 0.8268 Epoch 2/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.3762 - accuracy: 0.8651 Epoch 3/10 1875/1875 [==============================] - 10s 6ms/step - loss: 0.3361 - accuracy: 0.8778 Epoch 4/10 1875/1875 [==============================] - 10s 6ms/step - loss: 0.3130 - accuracy: 0.8860 Epoch 5/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2946 - accuracy: 0.8903 Epoch 6/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2816 - accuracy: 0.8958 Epoch 7/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2679 - accuracy: 0.9011 Epoch 8/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2578 - accuracy: 0.9027 Epoch 9/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2494 - accuracy: 0.9062 Epoch 10/10 1875/1875 [==============================] - 11s 6ms/step - loss: 0.2393 - accuracy: 0.9107 . &lt;keras.callbacks.History at 0x7f41ac3327f0&gt; . As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.91 (or 91%) on the training data. . Next, compare how the model performs on the test dataset: . test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print(&#39; nTest accuracy:&#39;, test_acc) . 313/313 - 1s - loss: 0.3225 - accuracy: 0.8908 - 1s/epoch - 3ms/step Test accuracy: 0.8907999992370605 . It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents overfitting. Overfitting is when a machine learning model performs worse on new, previouly unseen inputs than on the training data. . Predicting Images . With the model trained, you can use it to make predictions about some images. Attach a softmax layer to convert the model&#39;s linear outputs (logits) to probabilities, which should be easier to interpret. . probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) . predictions = probability_model.predict(test_images) . 313/313 [==============================] - 1s 3ms/step . Here, the model has predicted the label for each image in the testing set. Let&#39;s take a look at the first prediction: . predictions[0] . array([1.7737974e-10, 9.8017128e-10, 2.4250555e-08, 2.7087502e-10, 3.3816602e-11, 7.0955430e-04, 1.5008560e-09, 2.1424549e-02, 2.1235054e-09, 9.7786587e-01], dtype=float32) . A prediction is an array of 10 numbers. They represent the model&#39;s &quot;confidence&quot; that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value: . np.argmax(predictions[0]) . 9 . So, the model is most confident that this image is an ankle boot, or class_names[9]. Examining the test label shows that this classification is correct: . test_labels[0] . 9 . Graph this to look at the full set of 10 class predictions. . def plot_image(i, predictions_array, true_label, img): true_label, img = true_label[i], img[i] plt.grid(False) plt.xticks([]) plt.yticks([]) plt.imshow(img, cmap=plt.cm.binary) predicted_label = np.argmax(predictions_array) if predicted_label == true_label: color = &#39;blue&#39; else: color = &#39;red&#39; plt.xlabel(&quot;{} {:2.0f}% ({})&quot;.format(class_names[predicted_label], 100*np.max(predictions_array), class_names[true_label]), color=color) def plot_value_array(i, predictions_array, true_label): true_label = true_label[i] plt.grid(False) plt.xticks(range(10)) plt.yticks([]) thisplot = plt.bar(range(10), predictions_array, color=&quot;#777777&quot;) plt.ylim([0, 1]) predicted_label = np.argmax(predictions_array) thisplot[predicted_label].set_color(&#39;red&#39;) thisplot[true_label].set_color(&#39;blue&#39;) . With the model trained, you can use it to make predictions about some images. . Let&#39;s look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label. . i = 0 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() . i = 12 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() . Let&#39;s plot several images with their predictions. Note that the model can be wrong even when very confident. . # Color correct predictions in blue and incorrect predictions in red. num_rows = 5 num_cols = 3 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions[i], test_labels) plt.tight_layout() plt.show() . Finally, use the trained model to make a prediction about a single image. . img = test_images[1] print(img.shape) . (28, 28) . tf.keras models are optimized to make predictions on a batch, or collection, of examples at once. Accordingly, even though you&#39;re using a single image, you need to add it to a list: . img = (np.expand_dims(img,0)) print(img.shape) . (1, 28, 28) . Now predict the correct label for this image: . predictions_single = probability_model.predict(img) print(predictions_single) . 1/1 [==============================] - 0s 52ms/step [[1.0949210e-05 4.1276347e-11 9.9810290e-01 1.2848138e-10 1.0825287e-03 1.3133799e-13 8.0366491e-04 1.1366387e-15 3.2978012e-10 1.3686339e-15]] . plot_value_array(1, predictions_single[0], test_labels) _ = plt.xticks(range(10), class_names, rotation=45) plt.show() . tf.keras.Model.predict returns a list of lists, one list for each image in the batch of data. Grab the predictions for our (only) image in the batch: . np.argmax(predictions_single[0]) . 2 . And the model predicts a label as expected. .",
            "url": "https://nvarap.github.io/blog/jupyter/week-28/2023/04/03/TenserFlow.html",
            "relUrl": "/jupyter/week-28/2023/04/03/TenserFlow.html",
            "date": " • Apr 3, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This blog pertains to Varaprasad N, APCSP 1 Student. . Hobbies . I enjoy playing multiple games, mainly board games or TCGs 2 such as . The Pokémon TCG | The Yu-Gi-Oh TCG | Magic: The Gathering | . I also love to play Dungeons and Dragons, a TTRPG 3. I am also the President of the Tabletop Games club at my school . Clubs . I am a part of the Model United Nations Club, Dungeons and Dragons club, and Robotics . . Advanced Placement: Computer Science &#8617; . | Trading Card Games &#8617; . | Table Top RPG &#8617; . |",
          "url": "https://nvarap.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nvarap.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}